process.env.DEBUG="mediasoup*";const mediasoup=require("mediasoup"),config=require("../config");class MediasoupService{constructor(){this.workers=new Map,this.routers=new Map,this.transports=new Map,this.producers=new Map,this.consumers=new Map,this.nextWorkerId=0,this.initialized=!1}async initialize(){if(!this.initialized)try{const t=[];for(let r=0;r<config.mediasoup.numWorkers;r++)t.push(this.initializeWorker(r));await Promise.all(t),this.initialized=!0}catch(t){throw t}}async initializeWorker(t){const r=await mediasoup.createWorker(config.mediasoup.worker),e=await r.createRouter({mediaCodecs:config.mediasoup.router.mediaCodecs});r.on("died",(()=>{setTimeout((()=>process.exit(1)),2e3)})),this.workers.set(t,r),this.routers.set(t,e)}getNextWorker(){const t=this.nextWorkerId%this.workers.size;return this.nextWorkerId++,{workerId:t,router:this.routers.get(t)}}async createWebRtcTransport({forceTcp:t,producing:r,consuming:e,sctpCapabilities:o,roomId:s}){try{let t,i;if(s&&this.roomRouters&&this.roomRouters.has(s)){const r=this.roomRouters.get(s);t=r.router,i=r.workerId}else{const{workerId:r,router:e}=this.getNextWorker();t=e,i=r,s&&(this.roomRouters||(this.roomRouters=new Map),this.roomRouters.set(s,{router:t,workerId:i}))}const a={iceConsentTimeout:20,enableSctp:Boolean(o),numSctpStreams:(o||{}).numStreams,appData:{producing:r,consuming:e},listenIps:config.mediasoup.webRtcTransport.listenIps,enableUdp:config.mediasoup.webRtcTransport.enableUdp,enableTcp:config.mediasoup.webRtcTransport.enableTcp,maxIncomingBitrate:config.mediasoup.webRtcTransport.maxIncomingBitrate,maxOutgoingBitrate:config.mediasoup.webRtcTransport.maxOutgoingBitrate,initialAvailableOutgoingBitrate:config.mediasoup.webRtcTransport.initialAvailableOutgoingBitrate,maxSctpMessageSize:config.mediasoup.webRtcTransport.maxSctpMessageSize},n=await t.createWebRtcTransport(a);return this.transports.set(n.id,{transport:n,workerId:i}),{id:n.id,iceParameters:n.iceParameters,iceCandidates:n.iceCandidates,dtlsParameters:n.dtlsParameters,sctpParameters:n.sctpParameters,workerId:i}}catch(t){throw t}}async connectTransport(t,r){if(!this.transports.has(t))throw new Error(`Transport with id ${t} not found`);const e=this.transports.get(t);return await e.connect({dtlsParameters:r}),!0}async monitorProducer(t){setInterval((async()=>{try{const r=await t.getStats();r.reduce(((t,r)=>t+(r.bytesReceived||0)),0),r.reduce(((t,r)=>t+(r.packetCount||0)),0)}catch(t){}}),5e3)}async createProducer(t,r,e){try{const o=this.transports.get(t);if(!o||!o.transport)throw new Error(`Transport not found: ${t}`);const s=await o.transport.produce({kind:r,rtpParameters:e});return this.producers.set(s.id,{producer:s,workerId:o.workerId}),s.on("transportclose",(()=>{this.producers.delete(s.id)})),s.on("pause",(()=>{s.pause()})),s.on("resume",(()=>{s.resume()})),s.on("trace",(t=>{})),s.on("close",(()=>{})),s}catch(t){throw t}}async createConsumer(t,r,e){try{const o=this.transports.get(t);if(!o)throw new Error(`Transport not found: ${t}`);const s=this.producers.get(r);if(!s)throw new Error(`Producer not found: ${r}`);const i=this.routers.get(s.workerId);if(!i)throw new Error(`Router not found for producer ${r}`);if(!i.canConsume({producerId:r,rtpCapabilities:e}))throw new Error("Cannot consume this producer - RTP capabilities mismatch");const a=await o.transport.consume({producerId:r,rtpCapabilities:e,paused:!0});return this.consumers.set(a.id,{consumer:a,workerId:o.workerId}),{id:a.id,producerId:a.producerId,kind:a.kind,rtpParameters:a.rtpParameters}}catch(t){throw t}}getRtpCapabilities(){return this.routers.get(0).rtpCapabilities}async closeTransport(t){try{const r=this.transports.get(t);r&&(await r.close(),this.transports.delete(t))}catch(t){throw t}}getTransport(t){const r=this.transports.get(t);return r?r.transport:null}getTransportStats(t){const r=this.transports.get(t);if(!r)throw new Error(`Transport not found: ${t}`);return r.getStats()}}const mediasoupService=new MediasoupService;mediasoupService.initialize(),module.exports=mediasoupService;